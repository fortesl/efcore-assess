// <auto-generated />
using System;
using Fortes.Assess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Fortes.Assess.Data.Migrations
{
    [DbContext(typeof(AssessDbContext))]
    partial class AssessDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Fortes.Assess.Domain.AdminPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssessmentId");

                    b.Property<string>("Body");

                    b.Property<string>("Footer");

                    b.Property<string>("Header");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 8, 17, 15, 47, 32, 912, DateTimeKind.Local));

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId")
                        .IsUnique();

                    b.ToTable("AdminPages");
                });

            modelBuilder.Entity("Fortes.Assess.Domain.Assessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyId");

                    b.Property<string>("Description");

                    b.Property<int?>("DurationId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int?>("FieldId");

                    b.Property<int?>("FrameworkId");

                    b.Property<int?>("IndustryId");

                    b.Property<DateTime>("LastModified");

                    b.Property<int?>("LevelId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("OccupationId");

                    b.Property<int?>("PassingGrade");

                    b.Property<int?>("ProgrammingLanguageId");

                    b.Property<DateTime?>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DurationId");

                    b.HasIndex("FieldId");

                    b.HasIndex("FrameworkId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("LevelId");

                    b.HasIndex("OccupationId");

                    b.HasIndex("ProgrammingLanguageId");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("Fortes.Assess.Domain.AssessmentQuestion", b =>
                {
                    b.Property<int>("AssessmentId");

                    b.Property<int>("QuestionId");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 8, 17, 15, 47, 32, 917, DateTimeKind.Local));

                    b.HasKey("AssessmentId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AssessmentQuestion");
                });

            modelBuilder.Entity("Fortes.Assess.Domain.AssessmentUser", b =>
                {
                    b.Property<int>("AssessmentId");

                    b.Property<int>("UserId");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 8, 17, 15, 47, 32, 918, DateTimeKind.Local));

                    b.Property<int?>("RoleId");

                    b.HasKey("AssessmentId", "UserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AssessmentUser");
                });

            modelBuilder.Entity("Fortes.Assess.Domain.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("IndustryId");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new { Id = 1, IndustryId = 7, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Fortes Systems" }
                    );
                });

            modelBuilder.Entity("Fortes.Assess.Domain.Duration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 8, 17, 15, 47, 32, 918, DateTimeKind.Local));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Durations");

                    b.HasData(
                        new { Id = 1, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "1 Minute" },
                        new { Id = 2, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "5 Minutes" },
                        new { Id = 3, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "10 Minutes" },
                        new { Id = 4, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "15 Minutes" },
                        new { Id = 5, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "20 Minutes" },
                        new { Id = 6, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "20 Minutes" },
                        new { Id = 7, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "30 Minutes" },
                        new { Id = 8, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "45 Minutes" },
                        new { Id = 9, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "60 Minutes" },
                        new { Id = 10, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "90 Minutes" },
                        new { Id = 11, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "120 Minutes" }
                    );
                });

            modelBuilder.Entity("Fortes.Assess.Domain.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 8, 17, 15, 47, 32, 918, DateTimeKind.Local));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("Fortes.Assess.Domain.Framework", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 8, 17, 15, 47, 32, 918, DateTimeKind.Local));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Frameworks");

                    b.HasData(
                        new { Id = 1, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = ".NET" },
                        new { Id = 2, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = ".NET Core" },
                        new { Id = 3, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Java" },
                        new { Id = 4, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Angular" },
                        new { Id = 5, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "React" },
                        new { Id = 6, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Node" }
                    );
                });

            modelBuilder.Entity("Fortes.Assess.Domain.Industry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 8, 17, 15, 47, 32, 918, DateTimeKind.Local));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Industries");

                    b.HasData(
                        new { Id = 1, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Health" },
                        new { Id = 2, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Manufacturing" },
                        new { Id = 3, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Finances" },
                        new { Id = 4, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Banking" },
                        new { Id = 5, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Government" },
                        new { Id = 6, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Entertaiment" },
                        new { Id = 7, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Technology" },
                        new { Id = 8, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Music" }
                    );
                });

            modelBuilder.Entity("Fortes.Assess.Domain.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 8, 17, 15, 47, 32, 918, DateTimeKind.Local));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Levels");

                    b.HasData(
                        new { Id = 1, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Senior Level" },
                        new { Id = 2, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Junior Level" },
                        new { Id = 3, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Intermediate Level" },
                        new { Id = 4, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Beginner" },
                        new { Id = 5, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Internship" },
                        new { Id = 6, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Expert Level" }
                    );
                });

            modelBuilder.Entity("Fortes.Assess.Domain.Occupation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 8, 17, 15, 47, 32, 918, DateTimeKind.Local));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Occupations");

                    b.HasData(
                        new { Id = 2, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Architect" },
                        new { Id = 3, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Software Tester" },
                        new { Id = 4, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Software Developer - Full Stack" },
                        new { Id = 5, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Software Developer - Frontend" },
                        new { Id = 6, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Software Developer - Backend" },
                        new { Id = 7, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Designer" }
                    );
                });

            modelBuilder.Entity("Fortes.Assess.Domain.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IsCorrect");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 8, 17, 15, 47, 32, 918, DateTimeKind.Local));

                    b.Property<int>("QuestionId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Option");
                });

            modelBuilder.Entity("Fortes.Assess.Domain.ProgrammingLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 8, 17, 15, 47, 32, 918, DateTimeKind.Local));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ProgrammingLanguages");

                    b.HasData(
                        new { Id = 1, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "C#" },
                        new { Id = 2, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Java" },
                        new { Id = 3, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Javascript" },
                        new { Id = 4, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "C++" }
                    );
                });

            modelBuilder.Entity("Fortes.Assess.Domain.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<int?>("DurationId");

                    b.Property<string>("Explanation");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 8, 17, 15, 47, 32, 918, DateTimeKind.Local));

                    b.Property<int?>("LevelId");

                    b.Property<int?>("QuestionTypeId");

                    b.HasKey("Id");

                    b.HasIndex("DurationId");

                    b.HasIndex("LevelId");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Fortes.Assess.Domain.QuestionTag", b =>
                {
                    b.Property<int>("QuestionId");

                    b.Property<int>("TagId");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 8, 17, 15, 47, 32, 919, DateTimeKind.Local));

                    b.HasKey("QuestionId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("QuestionTag");
                });

            modelBuilder.Entity("Fortes.Assess.Domain.QuestionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 8, 17, 15, 47, 32, 919, DateTimeKind.Local));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("QuestionTypes");

                    b.HasData(
                        new { Id = 1, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Multiple Choice" },
                        new { Id = 2, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "True/False" },
                        new { Id = 3, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Essay" }
                    );
                });

            modelBuilder.Entity("Fortes.Assess.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 8, 17, 15, 47, 32, 919, DateTimeKind.Local));

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Admin" },
                        new { Id = 2, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "User" },
                        new { Id = 4, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Superuser" }
                    );
                });

            modelBuilder.Entity("Fortes.Assess.Domain.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 8, 17, 15, 47, 32, 919, DateTimeKind.Local));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new { Id = 1, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = ".NET" },
                        new { Id = 2, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = ".NET Core" },
                        new { Id = 3, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Java" },
                        new { Id = 4, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Angular" },
                        new { Id = 5, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "React" },
                        new { Id = 6, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Node" },
                        new { Id = 7, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "C#" },
                        new { Id = 8, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Java" },
                        new { Id = 9, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "Javascript" },
                        new { Id = 10, LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 925, DateTimeKind.Local), Name = "C++" }
                    );
                });

            modelBuilder.Entity("Fortes.Assess.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = 1, CompanyId = 1, Email = "lmlf100@gmail.com", FirstName = "Luis", LastModified = new DateTime(2018, 8, 17, 15, 47, 32, 926, DateTimeKind.Local), LastName = "Fortes", Name = "Luis Fortes", RoleId = 4 }
                    );
                });

            modelBuilder.Entity("Fortes.Assess.Domain.UserPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssessmentId");

                    b.Property<string>("Body");

                    b.Property<string>("Footer");

                    b.Property<string>("Header");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 8, 17, 15, 47, 32, 919, DateTimeKind.Local));

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId")
                        .IsUnique();

                    b.ToTable("UserPages");
                });

            modelBuilder.Entity("Fortes.Assess.Domain.AdminPage", b =>
                {
                    b.HasOne("Fortes.Assess.Domain.Assessment")
                        .WithOne("AdminPage")
                        .HasForeignKey("Fortes.Assess.Domain.AdminPage", "AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fortes.Assess.Domain.Assessment", b =>
                {
                    b.HasOne("Fortes.Assess.Domain.Company", "Company")
                        .WithMany("Assessments")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Fortes.Assess.Domain.Duration", "Duration")
                        .WithMany()
                        .HasForeignKey("DurationId");

                    b.HasOne("Fortes.Assess.Domain.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId");

                    b.HasOne("Fortes.Assess.Domain.Framework", "Framework")
                        .WithMany()
                        .HasForeignKey("FrameworkId");

                    b.HasOne("Fortes.Assess.Domain.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId");

                    b.HasOne("Fortes.Assess.Domain.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId");

                    b.HasOne("Fortes.Assess.Domain.Occupation", "Occupation")
                        .WithMany()
                        .HasForeignKey("OccupationId");

                    b.HasOne("Fortes.Assess.Domain.ProgrammingLanguage", "ProgrammingLanguage")
                        .WithMany()
                        .HasForeignKey("ProgrammingLanguageId");
                });

            modelBuilder.Entity("Fortes.Assess.Domain.AssessmentQuestion", b =>
                {
                    b.HasOne("Fortes.Assess.Domain.Assessment", "Assessment")
                        .WithMany("AssessmentQuestions")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fortes.Assess.Domain.Question", "Question")
                        .WithMany("QuestionAssessments")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fortes.Assess.Domain.AssessmentUser", b =>
                {
                    b.HasOne("Fortes.Assess.Domain.Assessment", "Assessment")
                        .WithMany("AssessmentUsers")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fortes.Assess.Domain.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("Fortes.Assess.Domain.User", "User")
                        .WithMany("UserAssessments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fortes.Assess.Domain.Option", b =>
                {
                    b.HasOne("Fortes.Assess.Domain.Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fortes.Assess.Domain.Question", b =>
                {
                    b.HasOne("Fortes.Assess.Domain.Duration", "Duration")
                        .WithMany()
                        .HasForeignKey("DurationId");

                    b.HasOne("Fortes.Assess.Domain.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId");

                    b.HasOne("Fortes.Assess.Domain.QuestionType", "QuestionType")
                        .WithMany()
                        .HasForeignKey("QuestionTypeId");
                });

            modelBuilder.Entity("Fortes.Assess.Domain.QuestionTag", b =>
                {
                    b.HasOne("Fortes.Assess.Domain.Question", "Question")
                        .WithMany("QuestionTags")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fortes.Assess.Domain.Tag", "Tag")
                        .WithMany("TagQuestions")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fortes.Assess.Domain.UserPage", b =>
                {
                    b.HasOne("Fortes.Assess.Domain.Assessment")
                        .WithOne("UserPage")
                        .HasForeignKey("Fortes.Assess.Domain.UserPage", "AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
